use rayon::prelude::*;
use std::fs;
fn main() {
    let stones: Vec<u64> = fs::read_to_string("input.txt")
        .unwrap()
        .split_whitespace()
        .map(|s| s.parse().unwrap())
        .collect();

    // Gotta be a better way than a dirty clone
    let total: u64 = stones
        .par_iter()
        .map(|&stone| blink_stone(stone, 0, 36))
        .sum();
    println!("{:?}", total);
}

fn blink_stone(stone: u64, iter: usize, max: usize) -> u64 {
    let mut result: u64 = 0;
    let mut stone_result: Vec<u64> = Vec::with_capacity(2);
    if stone == 0 {
        stone_result.push(1);
    } else if stone.to_string().chars().count() % 2 == 0 {
        let offset = (10 as u64).pow(stone.to_string().chars().count() as u32 / 2);
        let left = stone / offset; // u64 so get floor for free
        let right = stone - left * offset;

        stone_result.push(left);
        stone_result.push(right);
    } else {
        stone_result.push(stone * 2024);
    }
    if iter < (max - 1) {
        result += stone_result
            .par_iter()
            .map(|&stone| blink_stone(stone, iter + 1, max))
            .sum::<u64>()
    } else {
        result += stone_result.len() as u64;
    }

    result
}
