use std::{error::Error, fmt::Display, fs, str::FromStr};

fn main() {
    let map = Map::from_str(&fs::read_to_string("demo.txt").unwrap()).unwrap();

    let mut trailheads: Vec<Location> = Vec::new();
    for (row, row_data) in map.map.iter().enumerate() {
        for (col, elem) in row_data.iter().enumerate() {
            if *elem == 0 {
                trailheads.push(Location { row, col });
            }
        }
    }
}

fn take_step(loc: &Location, map: &Map) -> Vec<Location> {
    let mut endpoints: Vec<Location> = Vec::new();
    // Up
    let current = map.val_at(loc.row, loc.col);
    if (map.val_at(loc.row - 1, loc.col) - current) == 1 {
        if map.val_at(loc.row - 1, loc.col) == 9 {
            endpoints.push(Location {
                row: loc.row - 1,
                col: loc.col,
            });
        }
    }
    // Down
    let next = Location {
        row: loc.row - 1,
        col: loc.col,
    };
    if (map.val_at(loc.row + 1, loc.col) - current) == 1 {
        if map.val_at(loc.row + 1, loc.col) == 9 {
            endpoints.push();
        }
    }
    // Left
    if (map.val_at(loc.row - 1, loc.col) - current) == 1 {
        if map.val_at(loc.row - 1, loc.col) == 9 {
            endpoints.push(Location {
                row: loc.row - 1,
                col: loc.col,
            });
        }
    }
    // Right
    if (map.val_at(loc.row - 1, loc.col) - current) == 1 {
        if map.val_at(loc.row - 1, loc.col) == 9 {
            endpoints.push(Location {
                row: loc.row - 1,
                col: loc.col,
            });
        }
    }
    endpoints
}

enum StepDirection {
    Up,
    Down,
    Left,
    Right,
}

#[derive(Debug)]
struct Map {
    map: Vec<Vec<u32>>,
}

impl Map {
    fn val_at(&self, loc: Location) -> u32 {
        self.map[loc.row][loc.col]
    }
}

impl FromStr for Map {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let map: Vec<Vec<u32>> = s
            .lines()
            .map(|line| line.chars().map(|c| c.to_digit(10).unwrap()).collect())
            .collect();
        Ok(Map { map })
    }
}
impl Display for Map {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut output = String::new();
        for row in &self.map {
            for col in row {
                output.push_str(&col.to_string());
            }
            output.push_str("\n");
        }
        write!(f, "{output}")
    }
}

struct Location {
    row: usize,
    col: usize,
}
